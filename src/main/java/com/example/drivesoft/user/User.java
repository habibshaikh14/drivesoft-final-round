package com.example.drivesoft.user;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotEmpty;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * The {@code User} class represents the user entity in the application.
 * <p>
 * This class is mapped to the {@code user} table in the database and contains
 * the basic details of a user, such as the username and password.
 * It also integrates Hibernate caching for better performance in read-heavy applications.
 * </p>
 *
 * <p>Annotations:</p>
 * <ul>
 * <li>{@code @Entity} - Marks this class as a JPA entity.</li>
 * <li>{@code @Table} - Specifies the table name in the database.</li>
 * <li>{@code @Cache} - Enables caching with a read-write concurrency strategy for performance optimization.</li>
 * <li>{@code @Data} - Generates getters, setters, toString, equals, and hashCode methods using Lombok.</li>
 * <li>{@code @AllArgsConstructor} - Generates a constructor with all fields as parameters.</li>
 * <li>{@code @NoArgsConstructor} - Generates a no-argument constructor.</li>
 * </ul>
 *
 * <p>Key Fields:</p>
 * <ul>
 * <li>{@code id} - The unique identifier for the user (auto-generated).</li>
 * <li>{@code username} - The unique username for the user, cannot be empty.</li>
 * <li>{@code password} - The user's password, cannot be empty.</li>
 * </ul>
 *
 * @since 1.0
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "user")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class User {

  /**
   * The unique identifier for the user.
   * This field is auto-generated by the database.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id")
  private Long id;

  /**
   * The username for the user.
   * This field must not be empty and must be unique in the database.
   */
  @NotEmpty(message = "Username cannot be empty")
  @Column(name = "username", nullable = false, unique = true)
  private String username;

  /**
   * The password for the user.
   * This field must not be empty.
   */
  @NotEmpty(message = "Password cannot be empty")
  @Column(name = "password", nullable = false)
  private String password;
}
